// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Softdent2OpenDentalConversion.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Softdent2OpenDentalConversion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Softdent2OpenDentalConversion.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Softdent2OpenDentalConversion.Context.Softdent;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
using Softdent2OpenDentalConversion.Models.Softdent;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ExpCodes")]
    public partial class ExpCodes : SharedCode
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 66 "C:\Users\User\source\repos\Softdent2OpenDentalConversion\Softdent2OpenDentalConversion\Pages\ExpCodes.razor"
       

    // Create instances of the two numeric textboxes in order to better
    // be able to SET FOCUS.
    SfNumericTextBox<double?> numericTextBoxEplosionCode { get; set; }
    SfNumericTextBox<double?> numericTextBoxADACode { get; set; }

    // Blazor display variables for each numeric textbox.
    private double? explosionCode { get; set; } = 0;
    private double? adaCode { get; set; } = 0;

    // Variables for the page's DialogBox.
    private bool DialogBoxVisible { get; set; } = false;
    private string dialogBoxText { get; set; } = "";
    private string dialogBoxHeader { get; set; } = "System Message";

    // Explosion Code Grid and List instances.
    SfGrid<ExplosionCodes> Grid { get; set; }
    public List<Softdent2OpenDentalConversion.Models.Softdent.ExplosionCodes> GridData { get; set; }

    // DBContext for the Softdent database.
    SoftdentContext dbSoftdentContext = new SoftdentContext();

    // The selected row number and the table value of the column ID
    int rowIndex { get; set; } = 0;
    int recordID { get; set; } = 0;

    protected override void OnInitialized()
    {
        GridData = dbSoftdentContext.ExplosionCodes.OrderBy(e => e.ExplosionCode).ThenBy(e => e.ADACode).ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        numericTextBoxEplosionCode.FocusIn();

        if (firstRender)
        {
            // If the grid has records then highlight row 0.
            if (Grid.TotalItemCount > 0) Grid.SelectRow(0);
        }
    }

    async Task ScrollGrid(int rowIndex)
    {
        await jsRuntime.InvokeAsync<object>("scroll", rowIndex);
        await numericTextBoxEplosionCode.FocusIn();

        // The value of x above is the Grid RowIndex to be selected.
        await Grid.SelectRow(rowIndex);
    }

    private void AddCode()
    {
        bool _continue = true;

        if (explosionCode == 0)
        {
            // Do not continue if the Explosion Code value is zero.
            _continue = false;
            ShowModalDialogBox("Explosion Code cannot be zero!");
            numericTextBoxEplosionCode.FocusIn();
        }

        if (_continue && adaCode == 0)
        {
            // Do not continue if the ADA Code value is zero.
            _continue = false;
            ShowModalDialogBox("ADA code cannot be zero!");
            numericTextBoxADACode.FocusIn();
        }

        if (_continue)
        {
            // Check to see if the Explosion Code / ADA Code combination
            // already exists before adding.
            bool codesExist = dbSoftdentContext.ExplosionCodes.Where(e => e.ExplosionCode == (decimal)explosionCode)
                .Where(e => e.ADACode == (decimal)adaCode).ToList().Count() > 0;

            if (!codesExist)
            {
                // Add the new code combination.
                ExplosionCodes explosionCodes = new ExplosionCodes();
                explosionCodes.ExplosionCode = (decimal)explosionCode;
                explosionCodes.ADACode = (decimal)adaCode;
                dbSoftdentContext.Add(explosionCodes);
                dbSoftdentContext.SaveChanges();

                // Reload the table data to the grid.
                GridData = dbSoftdentContext.ExplosionCodes.OrderBy(e => e.ExplosionCode).ThenBy(e => e.ADACode).ToList();

                // Loop through the list until the newly added codes are located.
                int x = 0;
                foreach (var record in GridData)
                {
                    if (record.ExplosionCode == (decimal)explosionCode && record.ADACode == (decimal)adaCode) break;
                    x += 1;
                }

                // A Javascript routine to scroll to the selected grid row.
                ScrollGrid(x);

                StateHasChanged();
            }
            else
            {
                // Notify the user that the code combination already exists.
                string errorMessage = "The code combination of " + explosionCode.ToString() + " and " +
                    adaCode.ToString() + " already exists!";

                ShowModalDialogBox(errorMessage);
                numericTextBoxEplosionCode.FocusIn();
            }
        }

    }

    public void RowSelectHandler(RowSelectEventArgs<ExplosionCodes> args)
    {
        // Get the selected row of the grid along with the value of the table's
        // ID column after each mouse click.
        rowIndex = (int)args.RowIndex;
        recordID = args.Data.ID;
    }

    private void OnDialogBoxOverlayClick(MouseEventArgs args)
    {
        // Close the dialog box when the user clicks on it's close box.
        DialogBoxVisible = false;
    }

    private void ShowModalDialogBox(string message)
    {
        // Set the dialog box text and show.
        dialogBoxText = message;
        DialogBoxVisible = true;
    }

    private void DeleteHighlightedGridRecord()
    {
        var expCode = dbSoftdentContext.ExplosionCodes.SingleOrDefault(e => e.ID == recordID);
        dbSoftdentContext.ExplosionCodes.Remove(expCode);
        dbSoftdentContext.SaveChanges();

        // Reload the table data to the grid.
        GridData = dbSoftdentContext.ExplosionCodes.OrderBy(e => e.ExplosionCode).ThenBy(e => e.ADACode).ToList();

        if (rowIndex > 0) rowIndex -= 1;

        ScrollGrid(rowIndex);

        StateHasChanged();
    }

    private void OnContextMenuClick(ContextMenuClickEventArgs<ExplosionCodes> args)
    {
        switch (args.Item.Text)
        {
            case "Delete Record":
                DeleteHighlightedGridRecord();
                break;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
    }
}
#pragma warning restore 1591
